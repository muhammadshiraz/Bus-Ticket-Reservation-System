/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mypack;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Wali
 */


public class ViewCustomer extends javax.swing.JInternalFrame {

    /**
     * Creates new form AdminLogin
     */
    
    Connection con=null;
    Statement st;
    ResultSet rs;
    
    public ViewCustomer() 
    {
        initComponents();
        con=Connect.ConnectDB();
         try 
        {
         st = con.createStatement();
        } catch (SQLException ex) 
        {
            JOptionPane.showMessageDialog(this, ex);
        } 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        searchbox = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        searchtxt = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        ViewAll = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        btnClear1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(null);
        setClosable(true);
        setIconifiable(true);
        setTitle("View And Update Customer Details");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Preppy-icon.png"))); // NOI18N
        setVisible(false);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(102, 51, 255));

        searchbox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " ", "Id", "Name", "FatherName", "Email", "CNIC", "DateOfBirth" }));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setText("Search By");

        btnSearch.setBackground(new java.awt.Color(0, 0, 0));
        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnExit.setBackground(new java.awt.Color(0, 0, 0));
        btnExit.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnExit.setForeground(new java.awt.Color(255, 255, 255));
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        ViewAll.setBackground(new java.awt.Color(0, 0, 0));
        ViewAll.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ViewAll.setForeground(new java.awt.Color(255, 255, 255));
        ViewAll.setText("View All");
        ViewAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewAllActionPerformed(evt);
            }
        });

        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Name", "Father Name", "Gender", "Email", "Cnic", "Date Of Birth", "Age"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbl);

        btnClear1.setBackground(new java.awt.Color(0, 0, 0));
        btnClear1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnClear1.setForeground(new java.awt.Color(255, 255, 255));
        btnClear1.setText("Clear Table");
        btnClear1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClear1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchbox, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addComponent(ViewAll)
                        .addGap(18, 18, 18)
                        .addComponent(btnClear1)
                        .addGap(15, 15, 15)
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(searchtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExit)
                    .addComponent(ViewAll)
                    .addComponent(btnClear1))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 541, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("View And Update Customer Details");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(135, 135, 135)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addGap(14, 14, 14)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ViewAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewAllActionPerformed
        
        DefaultTableModel tm = (DefaultTableModel)tbl.getModel();
        tm.setNumRows(0);
        try {
            // TODO add your handling code here:
            rs = st.executeQuery("select * from TB_customer");

                   
                    while(rs.next())
                    {
                        tm.insertRow(tm.getRowCount(), new Object[]{rs.getString(1), rs.getString(3)
                            , rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9)});
                    }
                    
        }catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this,"No Record Found!");
        }
    }//GEN-LAST:event_ViewAllActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:

        DefaultTableModel tm = (DefaultTableModel)tbl.getModel();
        tm.setNumRows(0);
        String strbox = searchbox.getSelectedItem().toString();

        if(strbox.equals(" "))
        {
            JOptionPane.showMessageDialog(this, "Error! \n " +
                "Choose one Value From Combo Box \n to be searched");
            searchbox.requestFocus();
            searchtxt.setText(null);
        }
        else if(searchtxt.getText().equals(""))
        {
            JOptionPane.showMessageDialog(this,"Please Insert Value To Be Searched!");
            searchtxt.requestFocus();
        }

        else if(strbox.equals("Id"))
        {
            try {
                rs = st.executeQuery("select * from TB_customer where Cust_id = '" + searchtxt.getText() + "'");

                if(rs.next())
                {
                    tm.insertRow(tm.getRowCount(), new Object[]{rs.getString(1), rs.getString(3)
                        , rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9)});

                }
            else{
                JOptionPane.showMessageDialog(this,"Invalid ID ! !");
                searchtxt.requestFocus();
            }
        } catch (Exception ex) {

            ex.printStackTrace();

        }
        }

        else if(strbox.equals("Name"))
        {
            try {
                rs = st.executeQuery("select * from TB_customer where Cust_Name = '" + searchtxt.getText() + "'");

                if(rs.next())
                {
                    tm.insertRow(tm.getRowCount(), new Object[]{rs.getString(1), rs.getString(3)
                        , rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9)});

                while(rs.next())
                {
                    tm.insertRow(tm.getRowCount(), new Object[]{rs.getString(1), rs.getString(3)
                        , rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9)});
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this,"Invalid Entry");
            searchtxt.requestFocus();
        }

        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this,"Invalid Entry, Record Doesnt Exists!");
        }
        }
         else if(strbox.equals("FatherName"))
        {
            try {
                rs = st.executeQuery("select * from TB_customer where Cust_Name = '" + searchtxt.getText() + "'");

                if(rs.next())
                {
                    tm.insertRow(tm.getRowCount(), new Object[]{rs.getString(1), rs.getString(3)
                        , rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9)});

                while(rs.next())
                {
                    tm.insertRow(tm.getRowCount(), new Object[]{rs.getString(1), rs.getString(3)
                        , rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9)});
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this,"Invalid Entry");
            searchtxt.requestFocus();
        }

        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this,"Invalid Entry, Record Doesnt Exists!");
        }
        }
        else if(strbox.equals("Email"))
        {
            try {
                rs = st.executeQuery("select * from TB_customer where Cust_Email = '" + searchtxt.getText() + "'");

                if(rs.next())
                {
                    tm.insertRow(tm.getRowCount(), new Object[]{rs.getString(1), rs.getString(3)
                        , rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9)});

            }
            else
            {
                JOptionPane.showMessageDialog(this,"Invalid Entry \n Please Try Again");
                searchtxt.requestFocus();
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,"Invalid Entry, Record Doesnt Exists!");
        }
        }
        else if(strbox.equals("CNIC"))
        {
            try {
                rs = st.executeQuery("select * from TB_customer where Cust_CNIC = '" + searchtxt.getText() + "'");

                if(rs.next())
                {

                    tm.insertRow(tm.getRowCount(), new Object[]{rs.getString(1), rs.getString(3)
                        , rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9)});

                while(rs.next())
                {
                    tm.insertRow(tm.getRowCount(), new Object[]{rs.getString(1), rs.getString(3)
                        , rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9)});
                }
                }
        else
        {
            JOptionPane.showMessageDialog(this,"Invalid Entry \n Please Try Again");
            searchtxt.requestFocus();
        }

        } catch (SQLException ex)
        {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this,"Invalid Entry , Record Doesnt Exists!");
        }
        }

        else if(strbox.equals("DateOfBirth"))
        {
            try {
                rs = st.executeQuery("select * from TB_customer where Cust_DOB = '" + searchtxt.getText() + "'");

                if(rs.next())
                {
                    tm.insertRow(tm.getRowCount(), new Object[]{rs.getString(1), rs.getString(3)
                        , rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9)});

                while(rs.next())
                {
                    tm.insertRow(tm.getRowCount(), new Object[]{rs.getString(1), rs.getString(3)
                        , rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9)});
            }

        }
        else
        {
            JOptionPane.showMessageDialog(this,"Invalid Entry \n Please Try Again");
            searchtxt.requestFocus();
        }

        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this,"Invalid Entry, Record Doesnt Exists!");
        }

        }

        else
        {
            JOptionPane.showMessageDialog(this,"Invalid Search");
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnClear1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClear1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tm = (DefaultTableModel)tbl.getModel();
        tm.setNumRows(0);
    }//GEN-LAST:event_btnClear1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ViewAll;
    private javax.swing.JButton btnClear1;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox searchbox;
    private javax.swing.JTextField searchtxt;
    private javax.swing.JTable tbl;
    // End of variables declaration//GEN-END:variables
}
